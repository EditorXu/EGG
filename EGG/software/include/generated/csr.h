//--------------------------------------------------------------------------------
// Auto-generated by LiteX (4368d5a9e) on 2024-11-11 20:25:39
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* GPIO Registers */
#define CSR_GPIO_BASE (CSR_BASE + 0x800L)
#define CSR_GPIO_IN_ADDR (CSR_BASE + 0x800L)
#define CSR_GPIO_IN_SIZE 1
#define CSR_GPIO_OUT_ADDR (CSR_BASE + 0x804L)
#define CSR_GPIO_OUT_SIZE 1

/* GPIO Fields */

/* IDENTIFIER_MEM Registers */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1000L)

/* IDENTIFIER_MEM Fields */

/* LEDS Registers */
#define CSR_LEDS_BASE (CSR_BASE + 0x1800L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x1800L)
#define CSR_LEDS_OUT_SIZE 1

/* LEDS Fields */

/* SDRAM Registers */
#define CSR_SDRAM_BASE (CSR_BASE + 0x2000L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x2000L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x2004L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2008L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x200cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x2010L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x2014L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x2018L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x201cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2020L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x2024L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x2028L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x202cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x2030L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 1

/* SDRAM Fields */
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_BOTTOM_SIZE 1

/* SPISDCARD Registers */
#define CSR_SPISDCARD_BASE (CSR_BASE + 0x2800L)
#define CSR_SPISDCARD_CONTROL_ADDR (CSR_BASE + 0x2800L)
#define CSR_SPISDCARD_CONTROL_SIZE 1
#define CSR_SPISDCARD_STATUS_ADDR (CSR_BASE + 0x2804L)
#define CSR_SPISDCARD_STATUS_SIZE 1
#define CSR_SPISDCARD_MOSI_ADDR (CSR_BASE + 0x2808L)
#define CSR_SPISDCARD_MOSI_SIZE 1
#define CSR_SPISDCARD_MISO_ADDR (CSR_BASE + 0x280cL)
#define CSR_SPISDCARD_MISO_SIZE 1
#define CSR_SPISDCARD_CS_ADDR (CSR_BASE + 0x2810L)
#define CSR_SPISDCARD_CS_SIZE 1
#define CSR_SPISDCARD_LOOPBACK_ADDR (CSR_BASE + 0x2814L)
#define CSR_SPISDCARD_LOOPBACK_SIZE 1
#define CSR_SPISDCARD_CLK_DIVIDER_ADDR (CSR_BASE + 0x2818L)
#define CSR_SPISDCARD_CLK_DIVIDER_SIZE 1

/* SPISDCARD Fields */
#define CSR_SPISDCARD_CONTROL_START_OFFSET 0
#define CSR_SPISDCARD_CONTROL_START_SIZE 1
#define CSR_SPISDCARD_CONTROL_LENGTH_OFFSET 8
#define CSR_SPISDCARD_CONTROL_LENGTH_SIZE 8
#define CSR_SPISDCARD_STATUS_DONE_OFFSET 0
#define CSR_SPISDCARD_STATUS_DONE_SIZE 1
#define CSR_SPISDCARD_STATUS_MODE_OFFSET 1
#define CSR_SPISDCARD_STATUS_MODE_SIZE 1
#define CSR_SPISDCARD_CS_SEL_OFFSET 0
#define CSR_SPISDCARD_CS_SEL_SIZE 1
#define CSR_SPISDCARD_CS_MODE_OFFSET 16
#define CSR_SPISDCARD_CS_MODE_SIZE 1
#define CSR_SPISDCARD_LOOPBACK_MODE_OFFSET 0
#define CSR_SPISDCARD_LOOPBACK_MODE_SIZE 1

/* TIMER0 Registers */
#define CSR_TIMER0_BASE (CSR_BASE + 0x3000L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x3000L)
#define CSR_TIMER0_LOAD_SIZE 1
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x3004L)
#define CSR_TIMER0_RELOAD_SIZE 1
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x3008L)
#define CSR_TIMER0_EN_SIZE 1
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x300cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x3010L)
#define CSR_TIMER0_VALUE_SIZE 1
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x3014L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x3018L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x301cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1

/* TIMER0 Fields */
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1

/* UART Registers */
#define CSR_UART_BASE (CSR_BASE + 0x3800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x3800L)
#define CSR_UART_RXTX_SIZE 1
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x3804L)
#define CSR_UART_TXFULL_SIZE 1
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x3808L)
#define CSR_UART_RXEMPTY_SIZE 1
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x380cL)
#define CSR_UART_EV_STATUS_SIZE 1
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x3810L)
#define CSR_UART_EV_PENDING_SIZE 1
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x3814L)
#define CSR_UART_EV_ENABLE_SIZE 1
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x3818L)
#define CSR_UART_TXEMPTY_SIZE 1
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x381cL)
#define CSR_UART_RXFULL_SIZE 1

/* UART Fields */
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1

/* VIDEO_FRAMEBUFFER Registers */
#define CSR_VIDEO_FRAMEBUFFER_BASE (CSR_BASE + 0x4000L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_BASE_ADDR (CSR_BASE + 0x4000L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_BASE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_LENGTH_ADDR (CSR_BASE + 0x4004L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_LENGTH_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_ENABLE_ADDR (CSR_BASE + 0x4008L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_ENABLE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_DONE_ADDR (CSR_BASE + 0x400cL)
#define CSR_VIDEO_FRAMEBUFFER_DMA_DONE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_LOOP_ADDR (CSR_BASE + 0x4010L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_LOOP_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_OFFSET_ADDR (CSR_BASE + 0x4014L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_OFFSET_SIZE 1

/* VIDEO_FRAMEBUFFER Fields */

/* VIDEO_FRAMEBUFFER_VTG Registers */
#define CSR_VIDEO_FRAMEBUFFER_VTG_BASE (CSR_BASE + 0x4800L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_ENABLE_ADDR (CSR_BASE + 0x4800L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_ENABLE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HRES_ADDR (CSR_BASE + 0x4804L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HRES_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_START_ADDR (CSR_BASE + 0x4808L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_START_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_END_ADDR (CSR_BASE + 0x480cL)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_END_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSCAN_ADDR (CSR_BASE + 0x4810L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSCAN_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VRES_ADDR (CSR_BASE + 0x4814L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VRES_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_START_ADDR (CSR_BASE + 0x4818L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_START_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_END_ADDR (CSR_BASE + 0x481cL)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_END_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSCAN_ADDR (CSR_BASE + 0x4820L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSCAN_SIZE 1

/* VIDEO_FRAMEBUFFER_VTG Fields */

/* WATCHDOG0 Registers */
#define CSR_WATCHDOG0_BASE (CSR_BASE + 0x5000L)
#define CSR_WATCHDOG0_CONTROL_ADDR (CSR_BASE + 0x5000L)
#define CSR_WATCHDOG0_CONTROL_SIZE 1
#define CSR_WATCHDOG0_CYCLES_ADDR (CSR_BASE + 0x5004L)
#define CSR_WATCHDOG0_CYCLES_SIZE 1
#define CSR_WATCHDOG0_REMAINING_ADDR (CSR_BASE + 0x5008L)
#define CSR_WATCHDOG0_REMAINING_SIZE 1
#define CSR_WATCHDOG0_EV_STATUS_ADDR (CSR_BASE + 0x500cL)
#define CSR_WATCHDOG0_EV_STATUS_SIZE 1
#define CSR_WATCHDOG0_EV_PENDING_ADDR (CSR_BASE + 0x5010L)
#define CSR_WATCHDOG0_EV_PENDING_SIZE 1
#define CSR_WATCHDOG0_EV_ENABLE_ADDR (CSR_BASE + 0x5014L)
#define CSR_WATCHDOG0_EV_ENABLE_SIZE 1

/* WATCHDOG0 Fields */
#define CSR_WATCHDOG0_CONTROL_FEED_OFFSET 0
#define CSR_WATCHDOG0_CONTROL_FEED_SIZE 1
#define CSR_WATCHDOG0_CONTROL_ENABLE_OFFSET 8
#define CSR_WATCHDOG0_CONTROL_ENABLE_SIZE 1
#define CSR_WATCHDOG0_CONTROL_RESET_OFFSET 16
#define CSR_WATCHDOG0_CONTROL_RESET_SIZE 1
#define CSR_WATCHDOG0_CONTROL_PAUSE_HALTED_OFFSET 24
#define CSR_WATCHDOG0_CONTROL_PAUSE_HALTED_SIZE 1
#define CSR_WATCHDOG0_EV_STATUS_WDT_OFFSET 0
#define CSR_WATCHDOG0_EV_STATUS_WDT_SIZE 1
#define CSR_WATCHDOG0_EV_PENDING_WDT_OFFSET 0
#define CSR_WATCHDOG0_EV_PENDING_WDT_SIZE 1
#define CSR_WATCHDOG0_EV_ENABLE_WDT_OFFSET 0
#define CSR_WATCHDOG0_EV_ENABLE_WDT_SIZE 1

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* GPIO Access Functions */
static inline uint32_t gpio_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline uint32_t gpio_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void gpio_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}

/* IDENTIFIER_MEM Access Functions */

/* LEDS Access Functions */
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}

/* SDRAM Access Functions */
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2004L));
}
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x200cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x200cL));
}
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2010L));
}
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2014L));
}
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x201cL));
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x201cL));
}
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2020L));
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2020L));
}
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x2024L));
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2024L));
}
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2028L));
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2028L));
}
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x202cL));
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x202cL));
}
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2030L));
}

/* SPISDCARD Access Functions */
static inline uint32_t spisdcard_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
static inline void spisdcard_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2800L));
}
static inline uint32_t spisdcard_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline uint32_t spisdcard_mosi_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void spisdcard_mosi_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}
static inline uint32_t spisdcard_miso_read(void) {
	return csr_read_simple((CSR_BASE + 0x280cL));
}
static inline uint32_t spisdcard_cs_read(void) {
	return csr_read_simple((CSR_BASE + 0x2810L));
}
static inline void spisdcard_cs_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2810L));
}
static inline uint32_t spisdcard_loopback_read(void) {
	return csr_read_simple((CSR_BASE + 0x2814L));
}
static inline void spisdcard_loopback_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2814L));
}
static inline uint32_t spisdcard_clk_divider_read(void) {
	return csr_read_simple((CSR_BASE + 0x2818L));
}
static inline void spisdcard_clk_divider_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2818L));
}

/* TIMER0 Access Functions */
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3004L));
}
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3008L));
}
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x300cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x300cL));
}
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x3010L));
}
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x3014L));
}
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3018L));
}
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x301cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x301cL));
}

/* UART Access Functions */
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x380cL));
}
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3810L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3810L));
}
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3814L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3814L));
}
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3818L));
}
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x381cL));
}

/* VIDEO_FRAMEBUFFER Access Functions */
static inline uint32_t video_framebuffer_dma_base_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void video_framebuffer_dma_base_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
static inline uint32_t video_framebuffer_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x4004L));
}
static inline void video_framebuffer_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4004L));
}
static inline uint32_t video_framebuffer_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4008L));
}
static inline void video_framebuffer_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4008L));
}
static inline uint32_t video_framebuffer_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x400cL));
}
static inline uint32_t video_framebuffer_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x4010L));
}
static inline void video_framebuffer_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4010L));
}
static inline uint32_t video_framebuffer_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x4014L));
}

/* VIDEO_FRAMEBUFFER_VTG Access Functions */
static inline uint32_t video_framebuffer_vtg_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}
static inline void video_framebuffer_vtg_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4800L));
}
static inline uint32_t video_framebuffer_vtg_hres_read(void) {
	return csr_read_simple((CSR_BASE + 0x4804L));
}
static inline void video_framebuffer_vtg_hres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4804L));
}
static inline uint32_t video_framebuffer_vtg_hsync_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x4808L));
}
static inline void video_framebuffer_vtg_hsync_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4808L));
}
static inline uint32_t video_framebuffer_vtg_hsync_end_read(void) {
	return csr_read_simple((CSR_BASE + 0x480cL));
}
static inline void video_framebuffer_vtg_hsync_end_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x480cL));
}
static inline uint32_t video_framebuffer_vtg_hscan_read(void) {
	return csr_read_simple((CSR_BASE + 0x4810L));
}
static inline void video_framebuffer_vtg_hscan_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4810L));
}
static inline uint32_t video_framebuffer_vtg_vres_read(void) {
	return csr_read_simple((CSR_BASE + 0x4814L));
}
static inline void video_framebuffer_vtg_vres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4814L));
}
static inline uint32_t video_framebuffer_vtg_vsync_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x4818L));
}
static inline void video_framebuffer_vtg_vsync_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4818L));
}
static inline uint32_t video_framebuffer_vtg_vsync_end_read(void) {
	return csr_read_simple((CSR_BASE + 0x481cL));
}
static inline void video_framebuffer_vtg_vsync_end_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x481cL));
}
static inline uint32_t video_framebuffer_vtg_vscan_read(void) {
	return csr_read_simple((CSR_BASE + 0x4820L));
}
static inline void video_framebuffer_vtg_vscan_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4820L));
}

/* WATCHDOG0 Access Functions */
static inline uint32_t watchdog0_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x5000L));
}
static inline void watchdog0_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5000L));
}
static inline uint32_t watchdog0_cycles_read(void) {
	return csr_read_simple((CSR_BASE + 0x5004L));
}
static inline void watchdog0_cycles_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5004L));
}
static inline uint32_t watchdog0_remaining_read(void) {
	return csr_read_simple((CSR_BASE + 0x5008L));
}
static inline uint32_t watchdog0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x500cL));
}
static inline uint32_t watchdog0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x5010L));
}
static inline void watchdog0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5010L));
}
static inline uint32_t watchdog0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x5014L));
}
static inline void watchdog0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5014L));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
